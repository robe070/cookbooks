trigger: none

resources:
  pipelines:
    - pipeline: _Build Image Release Artefacts
      source: 'Build Image Release Artefacts  3.0'

  repositories:
    - repository: _lansa_aws-templates
      type: github
      endpoint: robe070
      name: lansa/aws-templates
      ref: support/scalable

    - repository: _robe070_cookbooks
      type: github
      endpoint: robe070
      name: robe070/cookbooks
      ref: debug/paas

variables:
  - group: Template Parameters
  - group: Default Branch
  - group: S3 uploads
  - group: VPC ap-southeast-2
  - group: VPC us-east-1
  - group: Git Repos
  - name: ArtifactSourceAlias
    value: _lansa_aws-templates
  - name: CookbooksSource1
    value: c:\lansa
  - name: imageReleaseState
    value: Production
  - name: jpnLanguage
    value: JPN
  - name: stackname
    value: BakingDP-ImageRelease
  - name: TemplateS3Namespace
    value: /image-cd-pipeline
  - name: vmImage
    value: windows-2019
  # - name: GitAwsTemplateMarketPlaceBranch
  #   value: support/scalable_marketplace
  # - name: GitAwsTemplatescalableBranch
  #   value: support/scalable
  # - name: GitCookBooksGitHubName
  #   value: github.com/robe070/cookbooks
  # - name: GitLansaAwsTemplatesGitHubName
  #   value: github.com/lansa/aws-templates
  # - name: GitLansaAwsTemplatesPAT
  #   value: ccc
  # - name: GitLansaAwsTemplatesRepoName
  #   value: _lansa_aws-templates
  # - name: GitRepoUserEmail
  #   value: lansacloud@lansa.com.au
  # - name: GitRepoUserName
  #   value: LansaCloud

stages:
- stage: UpdateAUSAMIs
  displayName: Update AUS AMIs
  jobs:
    - job:
      displayName: Agent job
      timeoutInMinutes: 0
      cancelTimeoutInMinutes: 1

      pool:
        vmImage: $(vmImage)
        #demands: ''

      steps:
        - download: _Build Image Release Artefacts
          displayName: Download artifacts from Build Image Release Artefacts 3.0

        - checkout: self

        - checkout: _lansa_aws-templates
          displayName: Checkout Lansa AWS Templates
          path: _lansa_aws-templates

        - checkout: _robe070_cookbooks
          displayName: Checkout Rob cookbooks
          path: _robe070_cookbooks

        - task: PowerShell@2
          displayName: 'Write access to Git Repo (lansa/aws-templates)'
          inputs:
            targetType: filePath
            # filePath: '$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            filePath: '$(Pipeline.Workspace)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            arguments: '-GitBranch ''$(GitLansaAwsTemplatesBranch)'' -GitURL ''https://$(GitLansaAwsTemplatesPAT):x-oauth-basic@$(GitLansaAwsTemplatesGitHubName)'' -GitUserEmail ''$(GitRepoUserEmail)'' -GitUserName ''$(GitRepoUserName)'' -GitRepoName ''$(ArtifactSourceAlias)'''
            pwsh: true

        - task: PowerShell@2
          displayName: 'Delete temp branch and create temp branch'
          inputs:
            targetType: filePath
            # filePath: './$(System.DefaultWorkingDirectory)/aws-templates/scripts/DeleteTempBranchAndCreatetempBranch.ps1'
            #filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/DeleteTempBranchAndCreatetempBranch.ps1'
            filePath: '$(Pipeline.Workspace)/_lansa_aws-templates/scripts/DeleteTempBranchAndCreatetempBranch.ps1'
            arguments: '-GitBranch ''$(GitLansaAwsTemplatesTempBranch)'' -GitRepoName ''$(ArtifactSourceAlias)'''
            pwsh: true

        - task: PowerShell@2
          displayName: 'Update Template AMI Mappings'
          inputs:
            targetType: filePath
            # filePath: './$(System.DefaultWorkingDirectory)/aws-templates/scripts/UpdateTemplateAMIMappings.ps1'
            # filePath: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/UpdateTemplateAMIMappings.ps1'
            filePath: '$(Pipeline.Workspace)/_lansa_aws-templates/scripts/UpdateTemplateAMIMappings.ps1'
            arguments: '-ImageType ''Development'''
            pwsh: true

        - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
          displayName: 'AWS Template verification'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'ap-southeast-2'
            awsCommand: 'cloudformation '
            awsSubCommand: 'validate-template'
            awsArguments: '--template-url  https://lansa.s3.ap-southeast-2.amazonaws.com/templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
            failOnStandardError: false

        - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
          displayName: 'S3 Upload: lansa'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'ap-southeast-2'
            bucketName: lansa
            #sourceFolder: '$(System.DefaultWorkingDirectory)/aws-templates/CloudFormationWindows'
            # sourceFolder: '$(System.DefaultWorkingDirectory)/_lansa_aws-templates/CloudFormationWindows'
            sourceFolder: '$(Pipeline.Workspace)/_lansa_aws-templates/CloudFormationWindows'
            globExpressions: '*.template'
            targetFolder: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)'
            filesAcl: 'public-read'

        - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
          displayName: 'AWS Delete the AMI ids from s3'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'ap-southeast-2'
            awsCommand: s3
            awsSubCommand: rm
            awsArguments: 's3://lansa/templates/support/scalable/ami-list/ --recursive'
            failOnStandardError: false

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w16d142IMGTest'
    stageDisplayname: 'w16d-14-2 IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-14-2
    stackname: w16d-14-2-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersionPrevious)
    parammsiURL: $(msiURLPrevious)
    paramWebserverOSVersionValue: $(WebserverOSPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w16d150IMGTest'
    stageDisplayname: 'w16d-15-0 IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-15-0
    stackname: w16d-15-0-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLLatest)
    paramWebserverOSVersionValue: $(WebserverOSPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w19d142IMGTest'
    stageDisplayname: 'w19d-14-2 IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-14-2
    stackname: w19d-14-2-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersionPrevious)
    parammsiURL: $(msiURLPrevious)
    paramWebserverOSVersionValue: $(WebserverOSLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w19d150IMGTest'
    stageDisplayname: 'w19d-15-0 IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-15-0
    stackname: w19d-15-0-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLLatest)
    paramWebserverOSVersionValue: $(WebserverOSLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w22d142IMGTest'
    stageDisplayname: 'w22d-14-2 IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-14-2
    stackname: w22d-14-2-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-14-2'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersionPrevious)
    parammsiURL: $(msiURLPrevious)
    paramWebserverOSVersionValue: $(WebserverOS2022)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w22d150IMGTest'
    stageDisplayname: 'w22d-15-0 IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-15-0
    stackname: w22d-15-0-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-15-0'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLLatest)
    paramWebserverOSVersionValue: $(WebserverOS2022)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w16d142jIMGTest'
    stageDisplayname: 'w16d-14-2j IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-14-2j
    stackname: w16d-14-2j-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(LansaVersionPrevious)
    parammsiURL: $(msiURLJPNPrevious)
    paramWebserverOSVersionValue: $(WebserverOSJpnPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w16d150jIMGTest'
    stageDisplayname: 'w16d-15-0j IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-15-0j
    stackname: w16d-15-0j-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLJPNLatest)
    paramWebserverOSVersionValue: $(WebserverOSJpnPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w19d142jIMGTest'
    stageDisplayname: 'w19d-14-2j IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-14-2j
    stackname: w19d-14-2j-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(LansaVersionPrevious)
    parammsiURL: $(msiURLJPNPrevious)
    paramWebserverOSVersionValue: $(WebserverOSJpnLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w19d150jIMGTest'
    stageDisplayname: 'w19d-15-0j IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-15-0j
    stackname: w19d-15-0j-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLJPNLatest)
    paramWebserverOSVersionValue: $(WebserverOSJpnLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w22d142jIMGTest'
    stageDisplayname: 'w22d-14-2j IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-14-2j
    stackname: w22d-14-2j-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersionPrevious)
    parammsiURL: $(msiURLJPNPrevious)
    paramWebserverOSVersionValue: $(WebserverOS2022jpn)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestAusImage.yml
  parameters:
    stageName: 'w22d150jIMGTest'
    stageDisplayname: 'w22d-15-0j IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-15-0j
    stackname: w22d-15-0j-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateAUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLJPNLatest)
    paramWebserverOSVersionValue: $(WebserverOS2022jpn)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w16d142CopyAMItoUS'
    stageDisplayname: 'w16d-14-2 Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-14-2
    jobDemand: DotNetFramework
    dependsOn: w16d142IMGTest
    globExpressions: w16d-14-2.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w16d150CopyAMItoUS'
    stageDisplayname: 'w16d-15-0 Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-15-0
    jobDemand: DotNetFramework
    dependsOn: w16d150IMGTest
    globExpressions: w16d-15-0.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w19d142CopyAMItoUS'
    stageDisplayname: 'w19d-14-2 Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-14-2
    jobDemand: DotNetFramework
    dependsOn: w19d142IMGTest
    globExpressions: w19d-14-2.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w19d150CopyAMItoUS'
    stageDisplayname: 'w19d-15-0 Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-15-0
    jobDemand: DotNetFramework
    dependsOn: w19d150IMGTest
    globExpressions: w19d-15-0.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w22d142CopyAMItoUS'
    stageDisplayname: 'w22d-14-2 Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-14-2
    jobDemand: DotNetFramework
    dependsOn: w22d142IMGTest
    globExpressions: w22d-14-2.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-14-2'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w22d150CopyAMItoUS'
    stageDisplayname: 'w22d-15-0 Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-15-0
    jobDemand: DotNetFramework
    dependsOn: w22d150IMGTest
    globExpressions: w22d-15-0.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-15-0'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w16d142jCopyAMItoUS'
    stageDisplayname: 'w16d-14-2j Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-14-2j
    jobDemand: DotNetFramework
    dependsOn: w16d142jIMGTest
    globExpressions: w16d-14-2j.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w16d150jCopyAMItoUS'
    stageDisplayname: 'w16d-15-0j Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-15-0j
    jobDemand: DotNetFramework
    dependsOn: w16d150jIMGTest
    globExpressions: w16d-15-0j.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w19d142jCopyAMItoUS'
    stageDisplayname: 'w19d-14-2j Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-14-2j
    jobDemand: DotNetFramework
    dependsOn: w19d142jIMGTest
    globExpressions: w19d-14-2j.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w19d150jCopyAMItoUS'
    stageDisplayname: 'w19d-15-0j Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-15-0j
    jobDemand: DotNetFramework
    dependsOn: w19d150jIMGTest
    globExpressions: w19d-15-0j.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w22d142jCopyAMItoUS'
    stageDisplayname: 'w22d-14-2j Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-14-2j
    jobDemand: DotNetFramework
    dependsOn: w22d142jIMGTest
    globExpressions: w22d-14-2j.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))

- template: AzureDevOps/templates/AWSCopyImageToUS .yml
  parameters:
    stageName: 'w22d150jCopyAMItoUS'
    stageDisplayname: 'w22d-15-0j Copy AMI to US'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-15-0j
    jobDemand: DotNetFramework
    dependsOn: w22d150jIMGTest
    globExpressions: w22d-15-0j.txt
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))

- stage: CommitAUStemplatechanges
  displayName: Commit AUS template changes
  dependsOn:
  - w16d142CopyAMItoUS
  - w16d150CopyAMItoUS
  - w16d142jCopyAMItoUS
  - w16d150jCopyAMItoUS
  - w19d142CopyAMItoUS
  - w19d150CopyAMItoUS
  - w19d142jCopyAMItoUS
  - w19d150jCopyAMItoUS
  - w22d142CopyAMItoUS
  - w22d150CopyAMItoUS
  - w22d142jCopyAMItoUS
  - w22d150jCopyAMItoUS
  jobs:
    - job:
      displayName: Agent job
      timeoutInMinutes: 0
      cancelTimeoutInMinutes: 1

      pool:
        vmImage: $(vmImage)
        #demands: ''

      steps:
        - download: _Build Image Release Artefacts
          displayName: Download artifacts from Build Image Release Artefacts 3.0

        - checkout: self

        - checkout: _lansa_aws-templates
          displayName: Checkout Lansa AWS Templates
          path: _lansa_aws-templates

        - checkout: _robe070_cookbooks
          displayName: Checkout Rob cookbooks
          path: _robe070_cookbooks

        - task: PowerShell@2
          displayName: 'Write access to Git Repo (lansa/aws-templates)'
          inputs:
            targetType: filePath
            # filePath: './$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            filePath: '$(Pipeline.Workspace)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            arguments: '-GitBranch ''$(GitLansaAwsTemplatesBranch)'' -GitURL ''https://$(GitLansaAwsTemplatesPAT):x-oauth-basic@$(GitLansaAwsTemplatesGitHubName)'' -GitUserEmail ''$(GitRepoUserEmail)'' -GitUserName ''$(GitRepoUserName)'' -GitRepoName ''$(ArtifactSourceAlias)'''
            pwsh: true


        - pwsh: |
           # change to project directory
           cd $(Pipeline.Workspace)/_lansa_aws-templates

           # fetch changes
           git fetch
           if (-not $?) {
            Write-Host(" git fetch failed");
            exit 1
           }


           # merge branch to the main branch (for testing merging temp branch to feature/119)
           git pull origin $(GitLansaAwsTemplatesTempBranch)
           if (-not $?) {
            Write-Host(" git pull origin $(GitLansaAwsTemplatesTempBranch) failed");
            exit 1
           }

           # push to the main branch
           git push
           if (-not $?) {
            Write-Host(" git push failed");
            exit 1
           }

          displayName: 'Commit AUS template changes'

- stage: UpdateUSAMIs
  displayName: Update US AMIs
  dependsOn: CommitAUStemplatechanges

  jobs:
    - job:
      displayName: Agent job
      timeoutInMinutes: 0
      cancelTimeoutInMinutes: 1

      pool:
        vmImage: $(vmImage)
        demands: 'DotNetFramework'

      steps:
        - download: _Build Image Release Artefacts
          displayName: Download artifacts from Build Image Release Artefacts 3.0

        - checkout: self

        - checkout: _lansa_aws-templates
          displayName: Checkout Lansa AWS Templates
          path: _lansa_aws-templates

        - checkout: _robe070_cookbooks
          displayName: Checkout Rob cookbooks
          path: _robe070_cookbooks

        - task: PowerShell@2
          displayName: 'Write access to Git Repo (lansa/_lansa_aws-templates)'
          inputs:
            targetType: filePath
            # filePath: './$(System.DefaultWorkingDirectory)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            filePath: '$(Pipeline.Workspace)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            arguments: '-GitBranch ''$(GitLansaAwsTemplatesBranch)'' -GitURL ''https://$(GitLansaAwsTemplatesPAT):x-oauth-basic@$(GitLansaAwsTemplatesGitHubName)'' -GitUserEmail ''$(GitLansaAwsTemplatesUserEmail)'' -GitUserName ''$(GitLansaAwsTemplatesUserName)'' -GitRepoName ''$(ArtifactSourceAlias)'''
            pwsh: true

        - task: PowerShell@2
          displayName: 'Delete temp branch and create temp branch'
          inputs:
            targetType: filePath
            # filePath: './$(System.DefaultWorkingDirectory)/aws-templates/scripts/DeleteTempBranchAndCreatetempBranch.ps1'
            filePath: '$(Pipeline.Workspace)/_lansa_aws-templates/scripts/DeleteTempBranchAndCreatetempBranch.ps1'
            arguments: '-GitBranch ''$(GitLansaAwsTemplatesTempBranch)'' -GitRepoName ''$(ArtifactSourceAlias)'''
            pwsh: true

        - task: AmazonWebServices.aws-vsts-tools.S3Download.S3Download@1
          displayName: 'S3 Download: lansa'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'ap-southeast-2'
            bucketName: lansa
            sourceFolder: 'templates/$(s3amiUpload)'
            targetFolder: '$(Pipeline.Workspace)'

        - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
          displayName: 'Overwrite ap-southeast-2 AMI Ids with us-east-1 AMI Ids'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'us-east-1'
            filePath: '$(Pipeline.Workspace)/_lansa_aws-templates/scripts/OverwriteAMIArtifact.ps1'

        - task: PowerShell@2
          displayName: 'Update Template AMI Mappings'
          inputs:
            targetType: filePath
            # filePath: './$(System.DefaultWorkingDirectory)/_lansa_aws-templates/scripts/UpdateTemplateAMIMappings.ps1'
            filePath: '$(Pipeline.Workspace)/_lansa_aws-templates/scripts/UpdateTemplateAMIMappings.ps1'
            arguments: '-ImageType ''Production'''
            pwsh: true

        - task: AmazonWebServices.aws-vsts-tools.AWSCLI.AWSCLI@1
          displayName: 'AWS Template verification'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'ap-southeast-2'
            awsCommand: cloudformation
            awsSubCommand: 'validate-template'
            awsArguments: '--template-url  https://lansa.s3.ap-southeast-2.amazonaws.com/templates/$(CookbooksBranch)$(TemplateS3Namespace)/lansa-master-win.cfn.template'
            failOnStandardError: false

        - task: AmazonWebServices.aws-vsts-tools.S3Upload.S3Upload@1
          displayName: 'S3 Upload: lansa'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'ap-southeast-2'
            bucketName: lansa
            sourceFolder: '$(Pipeline.Workspace)/_lansa_aws-templates/CloudFormationWindows'
            globExpressions: '*.template'
            targetFolder: 'templates/$(CookbooksBranch)$(TemplateS3Namespace)'
            filesAcl: 'public-read'

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w16d142USIMGTest'
    stageDisplayname: 'w16d-14-2 US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-14-2
    stackname: w16d-14-2-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-14-2'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(LansaVersionPrevious)
    parammsiURL: $(msiURLPrevious)
    paramWebserverOSVersionValue: $(WebserverOSPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w16d150USIMGTest'
    stageDisplayname: 'w16d-15-0 US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-15-0
    stackname: w16d-15-0-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-15-0'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLLatest)
    paramWebserverOSVersionValue: $(WebserverOSPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w16d142jUSIMGTest'
    stageDisplayname: 'w16d-14-2j US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-14-2j
    stackname: w16d-14-2j-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(LansaVersionPrevious)
    parammsiURL: $(msiURLJPNPrevious)
    paramWebserverOSVersionValue: $(WebserverOSJpnPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w16d150jUSIMGTest'
    stageDisplayname: 'w16d-15-0j US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w16d-15-0j
    stackname: w16d-15-0j-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w16d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLJPNLatest)
    paramWebserverOSVersionValue: $(WebserverOSJpnPreviousVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w19d142USIMGTest'
    stageDisplayname: 'w19d-14-2 US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-14-2
    stackname: w19d-14-2-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-14-2'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(LansaVersionPrevious)
    parammsiURL: $(msiURLPrevious)
    paramWebserverOSVersionValue: $(WebserverOSLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w19d150USIMGTest'
    stageDisplayname: 'w19d-15-0 US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-15-0
    stackname: w19d-15-0-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-15-0'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLLatest)
    paramWebserverOSVersionValue: $(WebserverOSLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w19d142jUSIMGTest'
    stageDisplayname: 'w19d-14-2j US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-14-2j
    stackname: w19d-14-2j-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(LansaVersionPrevious)
    parammsiURL: $(msiURLJPNPrevious)
    paramWebserverOSVersionValue: $(WebserverOSJpnLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w19d150jUSIMGTest'
    stageDisplayname: 'w19d-15-0j US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w19d-15-0j
    stackname: w19d-15-0j-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w19d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLJPNLatest)
    paramWebserverOSVersionValue: $(WebserverOSJpnLatestVersionValue)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w22d142USIMGTest'
    stageDisplayname: 'w22d-14-2 US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-14-2
    stackname: w22d-14-2-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-14-2'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersionPrevious)
    parammsiURL: $(msiURLPrevious)
    paramWebserverOSVersionValue: $(WebserverOS2022)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w22d150USIMGTest'
    stageDisplayname: 'w22d-15-0 US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-15-0
    stackname: w22d-15-0-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-15-0'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLLatest)
    paramWebserverOSVersionValue: $(WebserverOS2022)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w22d142jUSIMGTest'
    stageDisplayname: 'w22d-14-2j US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-14-2j
    stackname: w22d-14-2j-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-14-2j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(LansaVersionPrevious)
    parammsiURL: $(msiURLJPNPrevious)
    paramWebserverOSVersionValue: $(WebserverOS2022jpn)
    paramTagValue: "Lansa-Prod"

- template: AzureDevOps/templates/AWSTestUSImage.yml
  parameters:
    stageName: 'w22d150jUSIMGTest'
    stageDisplayname: 'w22d-15-0j US IMG Test'
    jobName: 'Agentjob'
    jobDisplayname: 'Agent job'
    BaseImageName: w22d-15-0j
    stackname: w22d-15-0j-US-IMG
    jobDemand: DotNetFramework
    dependsOn: UpdateUSAMIs
    jobcondition: and(succeeded(), or(eq(variables['Build-w22d-15-0j'], 'True'), eq(variables['Build-all'], 'True')))
    paramLansaVersion: $(lansaVersion)
    parammsiURL: $(msiURLJPNLatest)
    paramWebserverOSVersionValue: $(WebserverOS2022jpn)
    paramTagValue: "Lansa-Prod"

- stage: CommitUStemplatechanges
  displayName: Commit US template changes
  dependsOn:
  - w16d142USIMGTest
  - w16d150USIMGTest
  - w16d142jUSIMGTest
  - w16d150jUSIMGTest
  - w19d142USIMGTest
  - w19d150USIMGTest
  - w19d142jUSIMGTest
  - w19d150jUSIMGTest
  - w22d142USIMGTest
  - w22d150USIMGTest
  - w22d142jUSIMGTest
  - w22d150jUSIMGTest

  jobs:
    - job:
      displayName: Agent job
      timeoutInMinutes: 0
      cancelTimeoutInMinutes: 1

      pool:
        vmImage: $(vmImage)

      steps:
        - download: _Build Image Release Artefacts
          displayName: Download artifacts from Build Image Release Artefacts 3.0

        - checkout: self

        - checkout: _lansa_aws-templates
          displayName: Checkout Lansa AWS Templates
          path: _lansa_aws-templates

        - checkout: _robe070_cookbooks
          displayName: Checkout Rob cookbooks
          path: _robe070_cookbooks

        - task: PowerShell@2
          displayName: 'Write access to Git Repo (lansa/_lansa_aws-templates)'
          inputs:
            targetType: filePath
            filePath: '$(Pipeline.Workspace)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            arguments: '-GitBranch ''$(GitLansaAwsTemplatesBranch)'' -GitURL ''https://$(GitLansaAwsTemplatesPAT):x-oauth-basic@$(GitLansaAwsTemplatesGitHubName)'' -GitUserEmail ''$(GitRepoUserEmail)'' -GitUserName ''$(GitRepoUserName)'' -GitRepoName ''$(ArtifactSourceAlias)'''
            pwsh: true

        - pwsh: |
           # change to project directory
           cd $(Pipeline.Workspace)/_lansa_aws-templates

           Write-Host "fetch changes"
           git fetch
           if (-not $?) {
             Write-Host("git fetch failed");
             exit 1
           }

           Write-Host "merge branch to the main branch"
           git pull origin  $(GitLansaAwsTemplatesTempBranch) --allow-unrelated-histories
           if (-not $?) {
             Write-Host("git pull origin  $(GitLansaAwsTemplatesTempBranch) --allow-unrelated-histories failed");
             exit 1
           }

           Write-Host "Push to the main branch (support/scalable branch)"
           git push
           if (-not $?) {
             Write-Host("git push failed");
             exit 1
           }

           # The merge to Marketplace branch belongs in the template pipeline, so conditioned out for the moment

           if ($false) {
           Write-Host "Checkout to (support/scalable_marketplace branch)"
           git checkout  $(GitLansaAwsTemplatesMarketPlaceBranch)
           if (-not $?) {
             Write-Host("git checkout  $(GitLansaAwsTemplatesMarketPlaceBranch) failed");
             exit 1
           }

           # pull changes from (support/scalable branch)
           git pull origin  $(GitLansaAwsTemplatesBranch) --allow-unrelated-histories
           if (-not $?) {
             Write-Host("git pull origin  $(GitLansaAwsTemplatesBranch) --allow-unrelated-histories failed");
             exit 1
           }

           # push to the main branch  (support/scalable_marketplace branch)
           git push
           if (-not $?) {
             Write-Host("git push failed");
             exit 1
           }

           } # if($false)

          displayName: 'Commit US template changes'

- stage: Marketplace
  displayName: Marketplace
  dependsOn: CommitUStemplatechanges

  jobs:
    - job:
      displayName: Agentless job
      timeoutInMinutes: 0

      pool: server
      #   vmImage: $(vmImage)

      steps:
        # - download: _Build Image Release Artefacts 3.0
        #   displayName: Download artifacts from Build Image Release Artefacts 3.0

        # - checkout: self

        # - checkout: _lansa_aws-templates
        #   displayName: Checkout Divakshi/aws-templates

        # - checkout: _priyadishahCookbooks
        #   displayName: Checkout Divakshi/cookbooks

        - task: ManualIntervention@8
          displayName: 'Marketplace Instructions'
          inputs:
            instructions: |
              1. Manual step. Submit US AMIs to AWS MP. Upload the AMIs to AWS Markeplace.
              a. In N. Virginia, find date that is in the name that all the AMIs of this release share
              b. Go to AWS MP, Assets, AMI and Add AMI. Enter the date from the AMI Name.
              c. select all the images. 8? Click Next and enter the Role : arn:aws:iam::775488040364:role/AWS-Marketplace-Ingestion
              d. Click through, taking all the defaults
              2. Manually update a copy of the Product Load Form (today's date in the name) with the US AMIs.
              b. Pull the latest aws-templates support/scalable branch and check that all the AMis in the diff are in the PLF
              3. Even if only the images are being updated, the Template CD pipeline must be run to upload the updated templates to S3 ready for publication.
              4. Increment the Version Numbers in the Build Image Release Artefacts CI pipeline
              5. Increment the VersionText-TemplateCI variable for the Template CI pipeline testing

- stage: TagGit
  displayName: Tag Git
  jobs:
    - job:
      displayName: Agent job
      timeoutInMinutes: 0
      cancelTimeoutInMinutes: 1

      pool:
        vmImage: $(vmImage)
        #demands: ''

      steps:
        - download: _Build Image Release Artefacts
          displayName: Download artifacts from Build Image Release Artefacts 3.0

        - checkout: self

        - checkout: _lansa_aws-templates
          displayName: Checkout Lansa AWS Templates
          path: _lansa_aws-templates

        - checkout: _robe070_cookbooks
          displayName: Checkout Rob cookbooks
          path: _robe070_cookbooks

        - task: AmazonWebServices.aws-vsts-tools.AWSPowerShellModuleScript.AWSPowerShellModuleScript@1
          name: Gate
          displayName: 'Artifact Check : Set Gate Variable'
          inputs:
            awsCredentials: AzureDevOps
            regionName: 'ap-southeast-2'
            arguments: '-BaseImageName ''w19d-15-0'' -stackname ''w19d-15-0-IMG'''
            filePath: '$(Pipeline.Workspace)/_lansa_aws-templates/scripts/SetGateVariable.ps1'

        - pwsh: |
            # Print the Gate variables.
            Write-Host "Gate.IsEnabled: $(Gate.IsEnabled); Gate.ImageID: $(Gate.ImageID); Gate.version:$(Gate.version); Gate.stack:$(Gate.stack)"| Out-Default
          displayName: 'Artifact Check : Output Gate Variable'

        - task: PowerShell@2
          displayName: 'Write access to Git Repo (robe070/cookbooks)'
          inputs:
            targetType: filePath
            filePath: '$(Pipeline.Workspace)/_robe070_cookbooks/scripts/GitRepoWriteAccess.ps1'
            arguments: '-GitBranch ''$(CookbooksBranch)'' -GitURL ''https://$(GitLansaAwsTemplatesPAT):x-oauth-basic@$(GitCookBooksGitHubName)'' -GitUserEmail ''$(GitRepoUserEmail)'' -GitUserName ''$(GitRepoUserName)'' -GitRepoName ''$(CookbooksSourceAlias)'''
            pwsh: true

        - task: PowerShell@2
          displayName: 'Tag cookbooks repo'
          inputs:
            targetType: filePath
            filePath: '$(Pipeline.Workspace)/_robe070_cookbooks/scripts/GitTag.ps1'
            arguments: '-GitRepoName ''$(CookbooksSourceAlias)'' -Tags ''AWSImage-Bld-$(Build.BuildId)-$(Release.ReleaseName)-$(Gate.version)'''
            pwsh: true